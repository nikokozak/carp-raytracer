(load-and-use Test)
(load "Array.carp")
(load "Vector.carp")
(load "ray_color.carp")

(deftype (RayCanvas f) [width Int, height Int, pixels (Array f)])

(defmodule RayCanvas

  (defn index-at [canvas x y]
    (let [rows (height canvas)
          cols (width canvas)]
      (+ (* y cols) x)))

  (defn pixel-at [canvas x y]
    (Array.unsafe-nth (RayCanvas.pixels canvas)
                      @(RayCanvas.index-at canvas x y)))

  (defn write-pixel! [canvas x y color]
    (let [index (index-at canvas x y)]
      (Array.aset! (RayCanvas.pixels canvas) @index @color)))

  (defn write-pixel [canvas x y color]
    (let [index (index-at canvas x y)
          new-pixels (Array.aset @(RayCanvas.pixels canvas) @index @color)]
      (RayCanvas.init
       @(RayCanvas.width canvas)
       @(RayCanvas.height canvas)
       new-pixels)))

  (defn init-pixels [array element]
    (let [helper (fn [curr-index end]
                   (unless (< curr-index end)
                           (do (aset-uninitialized! array curr-index @element)
                               (helper (Int.- curr-index 1) end))))]
      (helper 0 (Array.length array))))

  )

(defn canvas [width height]
  (let-do [pixel-array (Array.allocate (* width height))]
    (RayCanvas.init-pixels &pixel-array &(RayColor.init 0.0 0.0 0.0))
    (RayCanvas.init width height pixel-array)))

(defn canvas-tests []
  (let [c (canvas 10 20)
        pixel (RayColor.init 0.0 0.0 0.0)]
    (with-test test
      (assert-equal test
                    @(RayCanvas.width &c)
                    10
                    "Canvas width is correct")
      (assert-equal test
                    @(RayCanvas.height &c)
                    20
                    "Canvas height is correct")
      (assert-true test
                   (Array.all?
                    &(fn [el] (Vector3.= el &pixel))
                    (RayCanvas.pixels &c))
                    "Canvas is initialized to black pixels")
      (assert-true test
                   (Vector3.= (do (RayCanvas.write-pixel! &c 2 3 &(color 1.0 0.0 0.0))
                                  (RayCanvas.pixel-at &c 2 3))
                              &(color 1.0 0.0 0.0))
                    "Writes a pixel in place")
      )))

(defn main []
  (Array.sum &[(canvas-tests)]))
