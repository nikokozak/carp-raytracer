;; The Tuple Datatype
(load-and-use Test)

(deftype Tuple [x Double, y Double, z Double, w Double])
(derive Tuple =) ;; automatically derive implementation of "="

(defmodule Tuple
           ;; kinda like monkey-patching in Ruby
           ;; we open up the namespace again.
           (implements = Tuple.=)

           (sig point (Fn [Double Double Double] Tuple))
           (defn point [x y z]
                 (init x y z 1.0))

           (sig vector (Fn [Double Double Double] Tuple))
           (defn vector [x y z]
                 (init x y z 0.0))

           (sig point? (Fn [&Tuple] Bool))
           (defn point? [tuple]
                 (= (w tuple) &1.0))

           (sig vector? (Fn [&Tuple] Bool))
           (defn vector? [tuple]
                 (= (w tuple) &0.0))

           (sig equal? (Fn [&Tuple &Tuple] Bool))
           (defn equal? [tuplea tupleb]
                 (= tuplea tupleb))

           (sig add (Fn [&Tuple &Tuple] Tuple))
           (doc add "Adds two Tuples")
           (defn add [a b]
                (init
                  (+ @(x a) @(x b))
                  (+ @(y a) @(y b))
                  (+ @(z a) @(z b))
                  (+ @(w a) @(w b))))

           (sig sub (Fn [&Tuple &Tuple] Tuple))
           (doc sub "Subtracts two Tuples")
           (defn sub [a b]
                 (Tuple.init
                   (- @(x a) @(x b))
                   (- @(y a) @(y b))
                   (- @(z a) @(z b))
                   (- @(w a) @(w b))))  

           (sig negate (Fn [&Tuple] Tuple))
           (doc negate "Mulitplies a Tuple by -1")
           (defn negate [tuple]
                 (Tuple.init
                   (* -1.0 @(x tuple))
                   (* -1.0 @(y tuple))
                   (* -1.0 @(z tuple))
                   (* -1.0 @(w tuple))))

           (sig mul (Fn [&Tuple Double] Tuple))
           (doc mul "Multiplies a Tuple by a scalar")
           (defn mul [tuple scalar]
                 (Tuple.init
                   (* scalar @(x tuple))
                   (* scalar @(y tuple))
                   (* scalar @(z tuple))
                   (* scalar @(w tuple))))

           (sig div (Fn [&Tuple Double] Tuple))
           (doc div "Divides a Tuple by a scalar")
           (defn div [tuple scalar]
                 (Tuple.init
                   (/ @(x tuple) scalar)
                   (/ @(y tuple) scalar)
                   (/ @(z tuple) scalar)
                   (/ @(w tuple) scalar)))

           (sig mag (Fn [&Tuple] Double))
           (doc mag "Calculates the magnitude of a Tuple")
           (defn mag [tuple]
                 (sqrt
                   (+ (pow @(x tuple) 2.0)
                      (+ (pow @(y tuple) 2.0) 
                         (pow @(z tuple) 2.0)))))

           (sig norm (Fn [&Tuple] Tuple))
           (doc norm "Normalizes a Tuple")
           (defn norm [tuple]
                 (Tuple.init
                   (/ @(x tuple) (mag tuple))
                   (/ @(y tuple) (mag tuple))
                   (/ @(z tuple) (mag tuple))
                   @(w tuple)))

           (sig dot (Fn [&Tuple &Tuple] Double))
           (doc dot "Calculates the dot product of two Tuples")
           (defn dot [a b]
                 (+ (* @(x a) @(x b))
                    (+ (* @(y a) @(y b))
                       (+ (* @(z a) @(z b))
                          (* @(w a) @(w b))))))

           (sig cross (Fn [&Tuple &Tuple] Tuple))
           (doc cross "Calculates the dot product - use ONLY WITH VECTORS")
           (defn cross [a b]
                 (vector
                   (- (* @(y a) @(z b))
                      (* @(z a) @(y b)))
                   (- (* @(z a) @(x b))
                      (* @(x a) @(z b)))
                   (- (* @(x a) @(y b))
                      (* @(y a) @(x b))))))

;; Tests

(use Tuple)

(defn point-tests []
      (let [p (Tuple.init 4.3 -4.2 3.1 1.0)]
        (with-test test
                   (assert-equal test
                                 (Tuple.x &p)
                                 &4.3
                                 "Point x is correctly set")
                   (assert-equal test
                                 (Tuple.y &p)
                                 &-4.2
                                 "Point y is correctly set")
                   (assert-equal test
                                 (Tuple.z &p)
                                 &3.1
                                 "Point z is correctly set")
                   (assert-equal test
                                 (Tuple.w &p)
                                 &1.0
                                 "Point w is correctly set")
                   (assert-true test
                                (point? &p)
                                "Tuple with weight 1.0 is a point")
                   (assert-false test
                                 (vector? &p)
                                 "Tuple with weight 1.0 is not a vector")
                   (assert-true test
                                (= &(point 4.0 -4.0 3.0)
                                 &(Tuple.init 4.0 -4.0 3.0 1.0))
                                 "point creates a Tuple with weight 1"))))

(defn vector-tests []
      (let [v (Tuple.init 4.3 -4.2 3.1 0.0)]
        (with-test test
                   (assert-equal test
                                 (Tuple.x &v)
                                 &4.3
                                 "Point x is correctly set")
                   (assert-equal test
                                 (Tuple.y &v)
                                 &-4.2
                                 "Point y is correctly set")
                   (assert-equal test
                                 (Tuple.z &v)
                                 &3.1
                                 "Point z is correctly set")
                   (assert-equal test
                                 (Tuple.w &v)
                                 &0.0
                                 "Point w is correctly set")
                   (assert-false test
                                (point? &v)
                                "Tuple with weight 1.0 is a vector")
                   (assert-true test
                                 (vector? &v)
                                 "Tuple with weight 1.0 is not a point")
                   (assert-true test
                                (= &(vector 4.0 -4.0 3.0)
                                       &(Tuple.init 4.0 -4.0 3.0 0.0))
                                "vector creates a Tuple with w 0"))))

(defn addition-tests []
      (let [a (Tuple.init 3.0 -2.0 5.0 1.0)
              b (Tuple.init -2.0 3.0 1.0 0.0)]

        (with-test test
                   (assert-true test
                                (= &(add &a &b)
                                   &(Tuple.init 1.0 1.0 6.0 1.0))
                                "Adds Tuples correctly")
                   (assert-true test
                                (= &(add &a &b)
                                   &(Tuple.init 1.0 1.0 6.0 1.0))
                                "Adds Tuples correctly"))))

(defn subtraction-tests []
      (let [p1 (point 3.0 2.0 1.0)
               p2 (point 5.0 6.0 7.0)
               v1 (vector 5.0 6.0 7.0)
               v2 (vector 3.0 2.0 1.0)
               vz (vector 0.0 0.0 0.0)]

        (with-test test
                   (assert-true test
                                (= &(sub &p1 &p2)
                                   &(vector -2.0 -4.0 -6.0))
                                "point - point = vector")
                   (assert-true test
                                (= &(sub &p1 &v1)
                                   &(point -2.0 -4.0 -6.0))
                                "point - vector = point") 
                   (assert-true test
                                (= &(sub &v2 &v1)
                                   &(vector -2.0 -4.0 -6.0))
                                "vector - vector = vector"))))

(defn multiplication-tests []
      (let [a (Tuple.init 1.0 -2.0 3.0 -4.0)]
        (with-test test
                   (assert-true test
                                (= &(mul &a 3.5)
                                   &(Tuple.init 3.5 -7.0 10.5 -14.0))
                                "Multiplies Tuples correctly")
                   (assert-true test
                                (= &(mul &a 0.5)
                                   &(Tuple.init 0.5 -1.0 1.5 -2.0))
                                "Multiplies Tuples by fractions correctly"))))

(defn division-tests []
      (let [a (Tuple.init 1.0 -2.0 3.0 -4.0)]
        (with-test test
                   (assert-true test
                                (= &(div &a 2.0)
                                   &(Tuple.init 0.5 -1.0 1.5 -2.0))
                                "Divides Tuples correctly"))))

(defn magnitude-tests []
      (let [a (vector 1.0 0.0 0.0)
              b (vector 0.0 1.0 0.0)
              c (vector 0.0 0.0 1.0)
              d (vector 1.0 2.0 3.0)
              e (vector -1.0 -2.0 -3.0)]
        (with-test test
                   (assert-true test
                                (= (mag &a)
                                   1.0)
                                "Magnitude of 1,0,0")
                   (assert-true test
                                (= (mag &b)
                                   1.0)
                                "Magnitude of 0,1,0")
                   (assert-true test
                                (= (mag &c)
                                   1.0)
                                "Magnitude of 0,0,1")
                   (assert-true test
                                (= (mag &d)
                                   (sqrt 14.0))
                                "Magnitude of 1,2,3")
                   (assert-true test
                                (= (mag &e)
                                   (sqrt 14.0))
                                "Magnitude of -1,-2,-3"))))

(defn normalization-tests []
      (let [a (vector 4.0 0.0 0.0)
              b (vector 1.0 2.0 3.0) ]
        (with-test test
                   (assert-true test
                                (= &(norm &a)
                                   &(vector 1.0 0.0 0.0))
                                "Normalizes 4,0,0 correctly")
                   (assert-true test
                                (= &(norm &b)
                                   &(vector
                                     (/ 1.0 (sqrt 14.0))
                                     (/ 2.0 (sqrt 14.0))
                                     (/ 3.0 (sqrt 14.0))))
                                "Normalizes 1,2,3 correctly")
                   (assert-true test
                                (= (mag &(norm &b))
                                   1.0)
                                "Magnitude of normalized is 1"))))

(defn dot-product-tests []
      (let [a (vector 2.0 3.0 4.0)
              b (vector 1.0 2.0 3.0) ]
        (with-test test
                   (assert-true test
                                (= (dot &a &b)
                                   20.0)
                                "Calculates the dot product")
                   )))

(defn dot-product-tests []
      (let [b (vector 2.0 3.0 4.0)
              a (vector 1.0 2.0 3.0) ]
        (with-test test
                   (assert-true test
                                (= &(cross &a &b)
                                   &(vector -1.0 2.0 -1.0))
                                "Calculates the cross product")
                   (assert-true test
                                (= &(cross &b &a)
                                   &(vector 1.0 -2.0 1.0))
                                "Calculates the cross product in order"))))

(defn main []
      (Array.sum &[
                   (point-tests)
                   (vector-tests)
                   (addition-tests)
                   (subtraction-tests)
                   (multiplication-tests)
                   (division-tests)
                   (magnitude-tests)
                   (normalization-tests)
                   (dot-product-tests)]))
