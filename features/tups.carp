;; The Tuple Datatype
(load-and-use Test)
(Project.config "title" "tuples")

(deftype Tuple [x Double, y Double, z Double, w Double])
(derive Tuple =) ;; automatically derive implementation of "="

(defmodule Tuple 
           ;; kinda like monkey-patching in Ruby
           ;; we open up the namespace again.
           (implements = Tuple.=)
           (implements + Tuple.add)

           (sig point (Fn [Double Double Double] Tuple))
           (defn point [x y z]
                 (init x y z 1.0))

           (sig vector (Fn [Double Double Double] Tuple))
           (defn vector [x y z]
                 (init x y z 0.0))

           (sig point? (Fn [&Tuple] Bool))
           (defn point? [tuple]
                 (= (w tuple) &1.0))

           (sig vector? (Fn [&Tuple] Bool))
           (defn vector? [tuple]
                 (= (w tuple) &0.0))

           (sig equal? (Fn [&Tuple &Tuple] Bool))
           (defn equal? [tuplea tupleb]
                 (= tuplea tupleb))

           (sig add (Fn [Tuple Tuple] Tuple))
           (defn add [a b]
                 (Tuple.init
                   (+ @(x &a) @(x &b))
                   (+ @(y &a) @(y &b))
                   (+ @(z &a) @(z &b))
                   (+ @(w &a) @(w &b)))))

;; Tests

(use Tuple)

(defn point-tests []
      (let [p (Tuple.init 4.3 -4.2 3.1 1.0)]
        (with-test test
                   (assert-equal test
                                 (Tuple.x &p)
                                 &4.3
                                 "Point x is correctly set")
                   (assert-equal test
                                 (Tuple.y &p)
                                 &-4.2
                                 "Point y is correctly set")
                   (assert-equal test
                                 (Tuple.z &p)
                                 &3.1
                                 "Point z is correctly set")
                   (assert-equal test
                                 (Tuple.w &p)
                                 &1.0
                                 "Point w is correctly set")
                   (assert-true test
                                (point? &p)
                                "Tuple with weight 1.0 is a point")
                   (assert-false test
                                 (vector? &p)
                                 "Tuple with weight 1.0 is not a vector")
                   (assert-true test
                                (= &(point 4.0 -4.0 3.0)
                                 &(Tuple.init 4.0 -4.0 3.0 1.0))
                                 "point creates a Tuple with weight 1"))))

(defn vector-tests []
      (let [v (Tuple.init 4.3 -4.2 3.1 0.0)]
        (with-test test
                   (assert-equal test
                                 (Tuple.x &v)
                                 &4.3
                                 "Point x is correctly set")
                   (assert-equal test
                                 (Tuple.y &v)
                                 &-4.2
                                 "Point y is correctly set")
                   (assert-equal test
                                 (Tuple.z &v)
                                 &3.1
                                 "Point z is correctly set")
                   (assert-equal test
                                 (Tuple.w &v)
                                 &0.0
                                 "Point w is correctly set")
                   (assert-false test
                                (point? &v)
                                "Tuple with weight 1.0 is a vector")
                   (assert-true test
                                 (vector? &v)
                                 "Tuple with weight 1.0 is not a point")
                   (assert-true test
                                (= &(vector 4.0 -4.0 3.0)
                                       &(Tuple.init 4.0 -4.0 3.0 0.0))
                                "vector creates a Tuple with w 0"))))

(defn addition-tests []
      (let [a (Tuple.init 3.0 -2.0 5.0 1.0)
              b (Tuple.init -2.0 3.0 1.0 0.0)]

        (with-test test
                   (assert-true test
                                (= &(+ a b)
                                   &(Tuple.init 1.0 1.0 6.0 1.0))
                                 "Adds Tuples correctly"))))

(defn main []
      (Array.sum &[
                   (point-tests)
                   (vector-tests)
                   (addition-tests) ]))
